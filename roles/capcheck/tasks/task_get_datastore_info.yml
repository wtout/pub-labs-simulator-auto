---
# tasks to get datastore info
- name: Get datastore info
  community.vmware.vmware_datastore_info:
    hostname: "{{ information.address }}"
    username: "{{ credentials.username }}"
    password: "{{ credentials.password }}"
    datacenter: "{{ information.datacenter }}"
    cluster: "{{ information.cluster }}"
    validate_certs: false
  register: datastore_info
  delegate_to: localhost

- name: Get list of usable primary site datastores
  when:
    - play_stack_group_list is defined
    - "'vcenter' in group_names"
  block:
    - name: Define lists of datastores to host the VMs
      ansible.builtin.include_tasks:
        file:
          task_define_datastores_list.yml
        apply:
          vars:
            vm_group: "{{ group_item }}"
            ds_list: "{{ datastore_info.datastores | sort(attribute='freeSpace') }}"
      loop: "{{ play_stack_group_list }}"
      loop_control:
        loop_var: group_item
    - name: Define list of usable datastores
      ansible.builtin.set_fact:
        usable_ds_list: "{{ usable_ds_list | default([]) | community.general.lists_union(vars[group_item + '_ds_names']) }}"
      loop: "{{ play_stack_group_list | default([]) }}"
      loop_control:
        loop_var: group_item
    - name: Define total free space on usable datastores
      ansible.builtin.set_fact:
        total_fs: "{{ total_fs | default(0) | int + myvar[0] }}"
      vars:
        myvar: "{{ datastore_info.datastores | selectattr('name', 'equalto', loop_item) | map(attribute='freeSpace') | list }}"
      loop: "{{ usable_ds_list }}"
      loop_control:
        loop_var: loop_item

- name: Get list of usable secondary site datastores
  when:
    - build.disaster_recovery
    - play_dr_group_list is defined
    - "'drvcenter' in group_names"
  block:
    - name: Define lists of datastores to host the DR VMs
      ansible.builtin.include_tasks:
        file:
          task_define_datastores_list.yml
        apply:
          vars:
            vm_group: "{{ group_item }}"
            ds_list: "{{ datastore_info.datastores | sort(attribute='freeSpace') }}"
      loop: "{{ play_dr_group_list }}"
      loop_control:
        loop_var: group_item
    - name: Define list of usable datastores
      ansible.builtin.set_fact:
        usable_ds_list: "{{ usable_ds_list | default([]) | community.general.lists_union(vars[group_item + '_ds_names']) }}"
      loop: "{{ play_dr_group_list }}"
      loop_control:
        loop_var: group_item
    - name: Define total free space on usable datastores
      ansible.builtin.set_fact:
        total_fs: "{{ total_fs | default(0) | int + myvar[0] }}"
      vars:
        myvar: "{{ datastore_info.datastores | selectattr('name', 'equalto', loop_item) | map(attribute='freeSpace') | list }}"
      loop: "{{ usable_ds_list }}"
      loop_control:
        loop_var: loop_item

- name: Information message
  ansible.builtin.debug:
    msg:
      - "{{ usable_ds_list }}"
      - "Total {{ 'dr' if 'drvcenter' in group_names else 'stack' }} available storage space: {{ (total_fs | float / 1024 | pow(4)) | string + \
        ' TiB' if (total_fs | int) | string | length > 12 else (total_fs | float / 1024 | pow(3)) | string + ' GiB' }}"
  when:
    - usable_ds_list is defined
    - total_fs is defined

- name: Verify that there is enough space to deploy the VMs
  ansible.builtin.assert:
    that:
      - "(total_fs | float / 1024 | pow(3)) >= vars[('dr' if 'drvcenter' in group_names else 'stack') + '_required_space'] | float"
    fail_msg: "Not enough storage space to deploy all the {{ 'dr' if 'drvcenter' in group_names else 'stack' }} VMs"
  when:
    - total_fs is defined

- name: Verify that there is enough space to deploy HA + DR VMs
  ansible.builtin.assert:
    that:
      - "((hostvars['vcenter01']['total_fs'] | float + hostvars['drvcenter01']['total_fs'] | float) / 1024 | pow(3)) >= \
        (hostvars['vcenter01']['stack_required_space'] | float + hostvars['drvcenter01']['dr_required_space'] | float)"
    fail_msg: "Not enough storage space to deploy all the HA + DR VMs"
  when:
    - build.disaster_recovery
    - datacenter.primary.name == datacenter.secondary.name
    - hostvars['vcenter01']['total_fs'] is defined
    - hostvars['drvcenter01']['total_fs'] is defined
  run_once: true
