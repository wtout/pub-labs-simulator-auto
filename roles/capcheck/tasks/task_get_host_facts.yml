---
# tasks to get host info
- name: Get host info
  community.vmware.vmware_host_facts:
    hostname: "{{ information.address }}"
    username: "{{ credentials.username }}"
    password: "{{ credentials.password }}"
    esxi_hostname: "{{ host_item }}"
    validate_certs: false
  loop: "{{ information.resources }}"
  loop_control:
    loop_var: host_item
  register: host_facts
  delegate_to: localhost
- name: Get host model
  when:
    - host_model is not defined
  block:
    - name: Define host_model_list
      ansible.builtin.set_fact:
        host_model_list: "{{ host_model_list | default([]) | community.general.lists_union([model_item.ansible_facts.ansible_product_name]) }}"
      loop: "{{ host_facts.results }}"
      loop_control:
        loop_var: model_item
        label: "{{ model_item.ansible_facts.ansible_hostname }}"
    - name: Define host_model
      ansible.builtin.set_fact:
        host_model: "{{ host_model_list | join }}"
- name: Define datastore type search string
  ansible.builtin.set_fact:
    ssd_raid10: "{{ 'raid-10' if host_model == 'UCSC-C240-M6SX' else 'ssd' }}"
    sas_raid5: "{{ 'raid-5' if host_model == 'UCSC-C240-M6SX' else 'sas' }}"
- name: Get primary site SSD/RAID10 datastores with enough free space
  when: "'vcenter' in group_names"
  block:
    - name: Define list of stack {{ ssd_raid10 + ' datastores with enough free space' }}
      ansible.builtin.set_fact:
        stack_ssd_ds_names: "{{ stack_ssd_ds_names | default([]) | community.general.lists_union(ds_item.ansible_facts.ansible_datastore | \
          selectattr('name', 'search', ssd_raid10) | map(attribute='name') | list) }}"
      vars:
        myvar: "{{ ds_item.ansible_facts.ansible_datastore | selectattr('name', 'search', ssd_raid10) | map(attribute='free') | list | join }}"
        vmvar: "{{ stack_ssd_required_space | default(0) | float / 2 }}"
        exreg: "(do not use) | donotuse"
        mydst: "{{ ds_item.ansible_facts.ansible_datastore | selectattr('name', 'search', ssd_raid10) | map(attribute='name') | list | join }}"
      loop: "{{ host_facts.results }}"
      loop_control:
        loop_var: ds_item
        label: "{{ ds_item.ansible_facts.ansible_datastore | selectattr('name', 'search', ssd_raid10) | map(attribute='name') | list }}"
      when:
        - (information.resources | length > 1 and ansible_play_hosts | select('search', 'em7db|splind') | reject('search', 'dr') | list | length >= 1) or \
          (information.resources | length == 1 and ansible_play_hosts | select('search', 'em7|spl') | list | length >= 1)
        - myvar | regex_replace(' [T|G]B', '') | float >= (vmvar | float / 1024 if myvar is search('TB') else vmvar | float)
        - mydst is not regex(exreg)
    - name: Define list of stack01 {{ ssd_raid10 + ' datastores with enough free space' }}
      ansible.builtin.set_fact:
        stack01_ssd_ds_names: "{{ stack_ssd_ds_names | default([]) | select('match', '^.+-[0-9][13579]') | list }}"
    - name: Check length of stack01_ssd_ds_names
      ansible.builtin.assert:
        that:
          - stack01_ssd_ds_names | length >= 1
        fail_msg: "No {{ ssd_raid10 }} storage space available for the odd VMs of the stack"
        success_msg: "Found {{ stack01_ssd_ds_names | length }} {{ ssd_raid10 }} storage space available for the odd VMs of the stack"
      when:
        - information.resources | length > 1
        - ansible_play_hosts | select('search', 'em7db|splind') | reject('search', 'dr') | reject('match', '^.+[02468]$') | list | length >= 1
    - name: Define list of stack02 {{ ssd_raid10 + ' datastores with enough free space' }}
      ansible.builtin.set_fact:
        stack02_ssd_ds_names: "{{ stack_ssd_ds_names | default([]) | select('match', '^.+-[0-9][02468]') | list }}"
    - name: Check length of stack02_ssd_ds_names
      ansible.builtin.assert:
        that:
          - stack02_ssd_ds_names | length >= 1
        fail_msg: "No {{ ssd_raid10 }} storage space available for the even VMs of the stack"
        success_msg: "Found {{ stack02_ssd_ds_names | length }} {{ ssd_raid10 }} storage space available for the even VMs of the stack"
      when:
        - information.resources | length > 1
        - ansible_play_hosts | select('search', 'em7db|splind') | reject('search', 'dr') | select('match', '^.+[02468]$') | list | length >= 1
    - name: Check length of stack_ssd_ds_names
      ansible.builtin.assert:
        that:
          - "stack_ssd_ds_names | length >= (1 if information.resources | length == 1 else 2)"
        fail_msg: "Not enough {{ ssd_raid10 }} storage space to deploy EM7 databases and/or splunk indices third disk"
        success_msg: "Found {{ stack_ssd_ds_names | length }} {{ ssd_raid10 }} datastores to deploy stack EM7 databases and/or splunk indices third disk"
      when:
        - (information.resources | length > 1 and ansible_play_hosts | select('search', 'em7db|splind') | reject('search', 'dr') | list | length >= 1) or \
          (information.resources | length == 1 and ansible_play_hosts | select('search', 'em7|spl') | list | length >= 1)

- name: Get secondary site SSD/RAID10 datastores with enough free space
  when:
    - build.disaster_recovery
    - "'drvcenter' in group_names"
  block:
    - name: Define list of DR {{ ssd_raid10 + ' datastores with enough free space' }}
      ansible.builtin.set_fact:
        dr_ssd_ds_names: "{{ dr_ssd_ds_names | default([]) | community.general.lists_union(ds_item.ansible_facts.ansible_datastore | \
          selectattr('name', 'search', ssd_raid10) | map(attribute='name') | list) }}"
      vars:
        myvar: "{{ ds_item.ansible_facts.ansible_datastore | selectattr('name', 'search', ssd_raid10) | map(attribute='free') | list | join }}"
        vmvar: "{{ dr_ssd_required_space | default(0) | float }}"
        exreg: '(do not use) | donotuse'
        mydst: "{{ ds_item.ansible_facts.ansible_datastore | selectattr('name', 'search', ssd_raid10) | map(attribute='name') | list | join }}"
      loop: "{{ host_facts.results }}"
      loop_control:
        loop_var: ds_item
        label: "{{ ds_item.ansible_facts.ansible_datastore | selectattr('name', 'search', ssd_raid10) | map(attribute='name') | list }}"
      when:
        - ansible_play_hosts | select('search', 'em7db|splind') | select('search', 'dr') | list | length >= 1
        - myvar | regex_replace(' [T|G]B', '') | float >= (vmvar | float / 1024 if myvar is search('TB') else vmvar | float)
        - mydst != '' and mydst is not search(exreg)
    - name: Check length of dr_ssd_ds_names
      ansible.builtin.assert:
        that:
          - dr_ssd_ds_names | length >= 1
        fail_msg: "No {{ ssd_raid10 }} storage space available for the DR VMs"
        success_msg: "Found {{ dr_ssd_ds_names | length }} {{ ssd_raid10 }} storage space available for the DR VMs"
      when:
        - ansible_play_hosts | select('search', 'em7db|splind') | select('search', 'dr') | list | length >= 1

- name: Define list of {{ ssd_raid10 + ' datastores with enough free space' }}
  ansible.builtin.set_fact:
    ssd_ds_names: "{{ stack_ssd_ds_names | default([]) | community.general.lists_union(dr_ssd_ds_names | default([])) }}"
  when:
    - ('vcenter' in group_names and information.resources | length > 1 and ansible_play_hosts | select('search', selstr) | list | length >= 1) or \
      ('drvcenter' in group_names and information.resources | length >= 1 and ansible_play_hosts | select('search', selstr) | list | length >= 1) or \
      ('vcenter' in group_names and information.resources | length == 1 and ansible_play_hosts | select('search', 'em7|spl') | list | length >= 1)
  vars:
    selstr: 'em7db|splind'

- name: Check length of ssd_ds_names
  ansible.builtin.assert:
    that:
      - "ssd_ds_names | length >= 1"
    fail_msg: "Not enough {{ ssd_raid10 }} storage space to deploy the DB VM"
    success_msg: "Found {{ ssd_ds_names | length }} {{ ssd_raid10 }} datastores to deploy the DB VM"
  when:
    - ('vcenter' in group_names and information.resources | length > 1 and ansible_play_hosts | select('search', selstr) | list | length >= 1) or \
      ('drvcenter' in group_names and information.resources | length >= 1 and ansible_play_hosts | select('search', selstr) | list | length >= 1) or \
      ('vcenter' in group_names and information.resources | length == 1 and ansible_play_hosts | select('search', 'em7|spl') | list | length >= 1)
  vars:
    selstr: 'em7db|splind'

- name: Get primary site SAS/RAID5 datastores with enough free space
  when: "'vcenter' in group_names"
  block:
    - name: Define list of stack {{ sas_raid5 + ' datastores with enough free space' }}
      ansible.builtin.set_fact:
        stack_sas_ds_names: "{{ stack_sas_ds_names | default([]) | community.general.lists_union(ds_item.ansible_facts.ansible_datastore | \
          selectattr('name', 'search', sas_raid5) | map(attribute='name') | list) }}"
      vars:
        myvar: "{{ ds_item.ansible_facts.ansible_datastore | selectattr('name', 'search', sas_raid5) | map(attribute='free') | list | join }}"
        vmvar: "{{ stack_sas_required_space | default(0) | float / 2 }}"
        exreg: "(do not use) | donotuse"
        mydst: "{{ ds_item.ansible_facts.ansible_datastore | selectattr('name', 'search', sas_raid5) | map(attribute='name') | list | join }}"
      loop: "{{ host_facts.results }}"
      loop_control:
        loop_var: ds_item
        label: "{{ ds_item.ansible_facts.ansible_datastore | selectattr('name', 'search', sas_raid5) | map(attribute='name') | list }}"
      when:
        - (information.resources | length > 1 and ansible_play_hosts | reject('search', 'dr|em7db|vcenter') | list | length >= 1) or \
          (information.resources | length == 1 and ansible_play_hosts | reject('search', 'em7|vcenter') | list | length >= 1)
        - myvar | regex_replace(' [T|G]B', '') | float >= (vmvar | float / 1024 if myvar is search('TB') else vmvar | float)
        - mydst is not regex(exreg)
    - name: Define list of stack01 {{ sas_raid5 + ' datastores with enough free space' }}
      ansible.builtin.set_fact:
        stack01_sas_ds_names: "{{ stack_sas_ds_names | default([]) | select('match', '^.+-[0-9][13579]') | list }}"
    - name: Check length of stack01_sas_ds_names
      ansible.builtin.assert:
        that:
          - stack01_sas_ds_names | length >= 1
        fail_msg: "No {{ sas_raid5 }} storage space available for the odd VMs of the stack"
        success_msg: "Found {{ stack01_sas_ds_names | length }} {{ sas_raid5 }} storage space available for the odd VMs of the stack"
      when:
        - information.resources | length > 1
        - ansible_play_hosts | reject('search', 'dr|em7db|vcenter') | reject('match', '^.+[02468]$') | list | length >= 1
    - name: Define list of stack02 {{ sas_raid5 + ' datastores with enough free space' }}
      ansible.builtin.set_fact:
        stack02_sas_ds_names: "{{ stack_sas_ds_names | default([]) | select('match', '^.+-[0-9][02468]') | list }}"
    - name: Check length of stack02_sas_ds_names
      ansible.builtin.assert:
        that:
          - stack02_sas_ds_names | length >= 1
        fail_msg: "No {{ sas_raid5 }} storage space available for the even VMs of the stack"
        success_msg: "Found {{ stack02_sas_ds_names | length }} {{ sas_raid5 }} storage space available for the even VMs of the stack"
      when:
        - information.resources | length > 1
        - ansible_play_hosts | reject('search', 'dr|em7db|vcenter') | select('match', '^.+[02468]$') | list | length >= 1
    - name: Check length of stack_sas_ds_names
      ansible.builtin.assert:
        that:
          - "stack_sas_ds_names | length >= (1 if information.resources | length == 1 else 2)"
        fail_msg: "Not enough {{ sas_raid5 }} storage space to deploy the non-DB VMs"
        success_msg: "Found {{ stack_sas_ds_names | length }} {{ sas_raid5 }} datastores to deploy the stack non-DB VMs"
      when:
        - (information.resources | length > 1 and ansible_play_hosts | reject('search', 'dr|em7db|vcenter') | list | length >= 1) or \
          (information.resources | length == 1 and ansible_play_hosts | reject('search', 'em7|vcenter') | list | length >= 1)

- name: Get secondary site SAS/RAID5 datastores with enough free space
  when:
    - build.disaster_recovery
    - "'drvcenter' in group_names"
  block:
    - name: Define list of DR {{ sas_raid5 + ' datastores with enough free space' }}
      ansible.builtin.set_fact:
        dr_sas_ds_names: "{{ dr_sas_ds_names | default([]) | community.general.lists_union(ds_item.ansible_facts.ansible_datastore | \
          selectattr('name', 'search', sas_raid5) | map(attribute='name') | list) }}"
      vars:
        myvar: "{{ ds_item.ansible_facts.ansible_datastore | selectattr('name', 'search', sas_raid5) | map(attribute='free') | list | join }}"
        vmvar: "{{ dr_sas_required_space | default(0) | float }}"
        exreg: '(do not use) | donotuse'
        mydst: "{{ ds_item.ansible_facts.ansible_datastore | selectattr('name', 'search', sas_raid5) | map(attribute='name') | list | join }}"
      loop: "{{ host_facts.results }}"
      loop_control:
        loop_var: ds_item
        label: "{{ ds_item.ansible_facts.ansible_datastore | selectattr('name', 'search', sas_raid5) | map(attribute='name') | list }}"
      when:
        - ansible_play_hosts | select('search', 'dr') | reject('search', 'em7db') | list | length >= 1
        - myvar | regex_replace(' [T|G]B', '') | float >= (vmvar | float / 1024 if myvar is search('TB') else vmvar | float)
        - mydst != '' and mydst is not search(exreg)
    - name: Check length of dr_sas_ds_names
      ansible.builtin.assert:
        that:
          - dr_sas_ds_names | length >= 1
        fail_msg: "No {{ sas_raid5 }} storage space available for the DR VMs"
        success_msg: "Found {{ dr_sas_ds_names | length }} {{ sas_raid5 }} storage space available for the DR non-DB VMs"
      when:
        - ansible_play_hosts | select('search', 'dr') | reject('search', 'em7db') | list | length >= 1

- name: Define list of {{ sas_raid5 + ' datastores with enough free space' }}
  ansible.builtin.set_fact:
    sas_ds_names: "{{ stack_sas_ds_names | default([]) | community.general.lists_union(dr_sas_ds_names | default([])) }}"
  when:
    - ('vcenter' in group_names and information.resources | length > 1 and ansible_play_hosts | reject('search', rejstr) | list | length >= 1) or \
      ('drvcenter' in group_names and information.resources | length >= 1 and ansible_play_hosts | reject('search', rejstr) | list | length >= 1) or \
      ('vcenter' in group_names and information.resources | length == 1 and ansible_play_hosts | reject('search', 'em7|vcenter') | list | length >= 1)
  vars:
    rejstr: 'em7db|vcenter'

- name: Check length of sas_ds_names
  ansible.builtin.assert:
    that:
      - "sas_ds_names | length >= 1"
    fail_msg: "Not enough {{ sas_raid5 }} storage space to deploy the non-DB VMs"
    success_msg: "Found {{ sas_ds_names | length }} {{ sas_raid5 }} datastores to deploy the non-DB VMs"
  when:
    - ('vcenter' in group_names and information.resources | length > 1 and ansible_play_hosts | reject('search', rejstr) | list | length >= 1) or \
      ('drvcenter' in group_names and information.resources | length >= 1 and ansible_play_hosts | reject('search', rejstr) | list | length >= 1) or \
      ('vcenter' in group_names and information.resources | length == 1 and ansible_play_hosts | reject('search', 'em7|vcenter') | list | length >= 1)
  vars:
    rejstr: 'em7db|vcenter'

- name: Define ssd_ds_total_fs
  ansible.builtin.set_fact:
    ssd_ds_total_fs: "{{ ssd_ds_total_fs | default(0) | float + myvar | regex_replace(' [T|G]B', '') | float * (1024 | pow(4) if myvar is search('TB') else \
      1024 | pow(3)) }}"
  vars:
    myvar: "{{ ds_item.1.ansible_facts.ansible_datastore | selectattr('name', 'equalto', ds_item.0) | map(attribute='free') | list | join }}"
    selstr: 'em7db|splind'
  loop: "{{ ssd_ds_names | default([]) | product(host_facts.results) | list }}"
  loop_control:
    loop_var: ds_item
    label: "{{ ds_item.1.ansible_facts.ansible_datastore | selectattr('name', 'equalto', ds_item.0) | map(attribute='free') | list }}"
  when:
    - ('vcenter' in group_names and information.resources | length > 1 and ansible_play_hosts | select('search', selstr) | list | length >= 1) or \
      ('drvcenter' in group_names and information.resources | length >= 1 and ansible_play_hosts | select('search', selstr) | list | length >= 1) or \
      ('vcenter' in group_names and information.resources | length == 1 and ansible_play_hosts | select('search', 'em7|spl') | list | length >= 1)

- name: Define sas_ds_total_fs
  ansible.builtin.set_fact:
    sas_ds_total_fs: "{{ sas_ds_total_fs | default(0) | float + myvar | regex_replace(' [T|G]B', '') | float * (1024 | pow(4) if myvar is search('TB') else \
      1024 | pow(3)) }}"
  vars:
    myvar: "{{ ds_item.1.ansible_facts.ansible_datastore | selectattr('name', 'equalto', ds_item.0) | map(attribute='free') | list | join }}"
    rejstr: 'em7db|vcenter'
  loop: "{{ sas_ds_names | default([]) | product(host_facts.results) | list }}"
  loop_control:
    loop_var: ds_item
    label: "{{ ds_item.1.ansible_facts.ansible_datastore | selectattr('name', 'equalto', ds_item.0) | map(attribute='free') | list }}"
  when:
    - ('vcenter' in group_names and information.resources | length > 1 and ansible_play_hosts | reject('search', rejstr) | list | length >= 1) or \
      ('drvcenter' in group_names and information.resources | length >= 1 and ansible_play_hosts | reject('search', rejstr) | list | length >= 1) or \
      ('vcenter' in group_names and information.resources | length == 1 and ansible_play_hosts | reject('search', 'em7|vcenter') | list | length >= 1)

- name: Define lists of datastores to host the Stack VMs # noqa: var-naming[no-jinja]
  ansible.builtin.set_fact:
    "{{ group_item + '_ds_names' }}": "{{ stack_ssd_ds_names if ((information.resources | length > 1 and group_item is search('em7db')) or \
    (information.resources | length == 1 and group_item is search('em7'))) else stack_sas_ds_names }}"
  loop: "{{ play_stack_group_list }}"
  loop_control:
    loop_var: group_item
  when:
    - "'vcenter' in group_names"
    - ansible_play_hosts | reject('search', 'dr|vcenter') | list | length >= 1

- name: Define lists of datastores to host the DR VMs # noqa: var-naming[no-jinja]
  ansible.builtin.set_fact:
    "{{ group_item + '_ds_names' }}": "{{ dr_ssd_ds_names if group_item is search('drem7db') else dr_sas_ds_names }}"
  loop: "{{ play_dr_group_list }}"
  loop_control:
    loop_var: group_item
  when:
    - build.disaster_recovery
    - "'drvcenter' in group_names"
    - ansible_play_hosts | select('search', 'dr') | list | length >= 1

- name: Define list of usable datastores
  ansible.builtin.set_fact:
    usable_ds_list: "{{ ssd_ds_names | default([]) | community.general.lists_union(sas_ds_names | default([])) }}"

- name: Define total free space on usable datastores
  ansible.builtin.set_fact:
    total_fs: "{{ ssd_ds_total_fs | default(0) | float + sas_ds_total_fs | default(0) | float }}"

- name: Assert that there is enough storage space to host the whole system
  ansible.builtin.assert:
    that:
      - "(total_fs | float / 1024 | pow(3)) >= (required_space | default(0) | float + dr_required_space | default(0) | float)"
    fail_msg: "Not enough storage space to deploy all the VMs"

- name: Information message
  ansible.builtin.debug:
    msg:
      - "Total available system storage space: {{ (total_fs | float / 1024 | pow(4)) | string + ' TiB' if (total_fs | int) | string | length > 12 else \
        (total_fs | float / 1024 | pow(3)) | string + ' GiB' }}"
      - "{{ ssd_ds_names | default([]) }}"
      - "{{ (ssd_ds_total_fs | default(0) | float / 1024 | pow(4)) | string + ' TiB' if ssd_ds_total_fs | default('0') | length > 12 else \
        (ssd_ds_total_fs | default(0) | float / 1024 | pow(3)) | string + ' GiB' }}"
      - "{{ sas_ds_names | default([]) }}"
      - "{{ (sas_ds_total_fs | default(0) | float / 1024 | pow(4)) | string + ' TiB' if sas_ds_total_fs | default('0') | length > 12 else \
        (sas_ds_total_fs | default(0) | float / 1024 | pow(3)) | string + ' GiB' }}"
