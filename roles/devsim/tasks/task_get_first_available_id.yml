---
# tasks to get the first available AVM ID
- block:
  - name: define first_available_id
    ansible.builtin.set_fact:
      first_available_id: "{{ first_dummy_interface_id }}"
    when:
      - active_avmid_list == []
  - name: define first_available_id
    ansible.builtin.set_fact:
      first_available_id: "{{ active_avmid_list|last|int + 1 }}"
    when:
      - active_avmid_list != []
      - range(first_dummy_interface_id|int, active_avmid_list|last|int + 1)|map('string')|difference(active_avmid_list) == []
  - block:
    - name: define fid
      ansible.builtin.set_fact:
        fid: "{{ id_item if id_item|string not in active_avmid_list else '' }}"
      loop: "{{ range(first_available_id|int + 1, active_avmid_list|last|int + 1) }}"
      loop_control:
        loop_var: id_item
      when:
        - first_available_id is defined
        - active_avmid_list != []
        - fid|default('') == ''
    - name: define fid
      ansible.builtin.set_fact:
        fid: "{{ id_item if id_item|string not in active_avmid_list else '' }}"
      loop: "{{ range(first_dummy_interface_id|int, active_avmid_list|last|int + 1) }}"
      loop_control:
        loop_var: id_item
      when:
        - first_available_id is not defined
        - active_avmid_list != []
        - fid|default('') == ''
    - name: define first_available_id
      ansible.builtin.set_fact:
        first_available_id: "{{ fid }}"
        fid: ''
      when: fid != ''
    when:
      - active_avmid_list != []
      - first_available_id|default(first_dummy_interface_id)|int < active_avmid_list|last|int
  tags: [ 'never', 'devsim' ]
