---
# tasks to simulate a device
- name: Simulate device
  vars:
    max_heap: "{{ '64' if device.ssh | default(false) | bool else '32' }}"
  block:
    - name: Get active AVM ID
      ansible.builtin.include_tasks: task_get_active_avmid.yml
    - name: Get first available ID
      ansible.builtin.include_tasks: task_get_first_available_id.yml
    - name: Get first available IP
      ansible.builtin.include_tasks:
        file: task_get_first_available_ip.yml
        apply:
          vars:
            avm_id: "{{ first_available_id }}"
    - name: Create AVM file
      ansible.builtin.include_tasks:
        file: task_create_avm_file.yml
        apply:
          vars:
            avm_id: "{{ first_available_id }}"
    - name: Create dummy interface
      ansible.builtin.include_tasks:
        file: task_create_dummy_interface.yml
        apply:
          vars:
            int_id: "{{ first_available_id }}"
    - name: Starting AVM
      block:
        - name: Start AVM
          ansible.builtin.include_tasks:
            file: task_start_avm.yml
            apply:
              vars:
                avm_id: "{{ first_available_id }}"
                max_heap_size: "{{ new_heap }}"
          vars:
            adj_heap: "{{ max_heap | int + 2 * (first_available_id | int - 100) }}"
            new_heap: "{{ [adj_heap | int, 2048] | min }}"
      rescue:
        - name: Stop AVM
          ansible.builtin.include_tasks:
            file: task_stop_avm.yml
            apply:
              vars:
                avm_id: "{{ first_available_id }}"
        - name: Delete AVM and dummy interface
          when: reg_start.stderr is search('file not found')
          block:
            - name: Delete AVM file
              ansible.builtin.include_tasks:
                file: task_delete_avm_file.yml
                apply:
                  vars:
                    avm_id: "{{ first_available_id }}"
            - name: Delete dummy interface
              ansible.builtin.include_tasks:
                file: task_delete_dummy_interface.yml
                apply:
                  vars:
                    int_id: "{{ first_available_id }}"
        - name: Start AVM
          ansible.builtin.include_tasks:
            file: task_start_avm.yml
            apply:
              vars:
                avm_id: "{{ first_available_id }}"
                max_heap_size: "{{ [new_heap | int, 256] | max }}"
          vars:
            adj_heap: "{{ max_heap | int + 8 * (first_available_id | int - 100) }}"
            new_heap: "{{ [adj_heap | int, 2048] | min }}"
          when: reg_start.stderr is search('Invalid maximum heap size|heap space|GC overhead limit exceeded')
    - name: Create simulated device records
      ansible.builtin.include_tasks: task_create_simdev_records.yml
    - name: Verifying response
      when:
        - reg_start is succeeded
      block:
        - name: Get highest used IP
          ansible.builtin.shell:
            cmd: set -o pipefail && ip a show dummy{{ first_available_id }} | grep inet | tail -1 | awk '{print $2}' | cut -d '/' -f1
            executable: /bin/bash
          register: reg_highest_ip
          changed_when: false
          failed_when: reg_highest_ip.stderr is search('does not exist')
          become: "{{ true if ansible_user != 'root' else false }}"
          check_mode: false
          when: device.ssh | default(false) | bool or device.snmpv2 | default(false) | bool or device.snmpv3 | default(false) | bool or \
            device.api | default(false) | bool
        - name: Verifying SSH connection
          when:
            - device.ssh | default(false) | bool
          block:
            - name: Verify SSH connection
              ansible.builtin.include_tasks:
                file: task_verify_ssh_connection.yml
                apply:
                  vars:
                    ip: "{{ reg_highest_ip.stdout }}"
                    username: "{{ device.username }}"
                    password: "{{ device.password }}"
          rescue:
            - name: Stop AVM
              ansible.builtin.include_tasks:
                file: task_stop_avm.yml
                apply:
                  vars:
                    avm_id: "{{ first_available_id }}"
            - name: Start AVM
              ansible.builtin.include_tasks:
                file: task_start_avm.yml
                apply:
                  vars:
                    avm_id: "{{ first_available_id }}"
                    max_heap_size: "{{ [new_heap | int, (device.num | int / 100) | round | int * 32 + (256 if device.num | int < 900 else 320 if \
                      device.num | int < 4000 else 576)] | max }}"
              vars:
                adj_heap: "{{ max_heap | int + 8 * (first_available_id | int - 100) }}"
                new_heap: "{{ [adj_heap | int, 2048] | min }}"
            - name: Verify SSH connection
              ansible.builtin.include_tasks:
                file: task_verify_ssh_connection.yml
                apply:
                  vars:
                    ip: "{{ reg_highest_ip.stdout }}"
                    username: "{{ device.username }}"
                    password: "{{ device.password }}"
        - name: Verifying SNMP response
          when:
            - device.snmpv2 | default(false) | bool or device.snmpv3 | default(false) | bool
          block:
            - name: Verify SNMP response
              block:
                - name: Verify SNMP response
                  ansible.builtin.include_tasks:
                    file: task_verify_snmp_response.yml
                    apply:
                      vars:
                        devid: "{{ device.id }}"
                        ip: "{{ reg_highest_ip.stdout }}"
                        snmpv2: "{{ device.snmpv2 }}"
                        snmpv3: "{{ device.snmpv3 }}"
                        comstr: "{{ device.community }}"
                        authpr: "{{ device.v3authprotocol }}"
                        privpr: "{{ device.v3privprotocol }}"
                        authusr: "{{ device.v3authusername }}"
                        authpas: "{{ device.v3authpassword }}"
                        privpas: "{{ device.v3privpassword }}"
              rescue:
                - name: Stop AVM
                  ansible.builtin.include_tasks:
                    file: task_stop_avm.yml
                    apply:
                      vars:
                        avm_id: "{{ first_available_id }}"
                - name: Start AVM
                  ansible.builtin.include_tasks:
                    file: task_start_avm.yml
                    apply:
                      vars:
                        avm_id: "{{ first_available_id }}"
                        max_heap_size: "{{ [new_heap | int, (device.num | int / 100) | round | int * 32 + (256 if device.num | int < 900 else 320 if \
                          device.num | int < 4000 else 576)] | max }}"
                  vars:
                    adj_heap: "{{ max_heap | int + 8 * (first_available_id | int - 100) }}"
                    new_heap: "{{ [adj_heap | int, 2048] | min }}"
                - name: Verify SNMP response
                  ansible.builtin.include_tasks:
                    file: task_verify_snmp_response.yml
                    apply:
                      vars:
                        devid: "{{ device.id }}"
                        ip: "{{ reg_highest_ip.stdout }}"
                        snmpv2: "{{ device.snmpv2 }}"
                        snmpv3: "{{ device.snmpv3 }}"
                        comstr: "{{ device.community }}"
                        authpr: "{{ device.v3authprotocol }}"
                        privpr: "{{ device.v3privprotocol }}"
                        authusr: "{{ device.v3authusername }}"
                        authpas: "{{ device.v3authpassword }}"
                        privpas: "{{ device.v3privpassword }}"
            - name: Define snmp_flawed_recording_list
              ansible.builtin.set_fact:
                snmp_flawed_recording_list: "{{ snmp_flawed_recording_list | default([]) + \
                  [device.id + ': ' + (v3resp if device.snmpv3 | default(false) else v2resp) | string] }}"
              when:
                - (device.snmpv2 | default(false) | bool and reg_snmpv2_response.msg is defined and \
                  reg_snmpv2_response.msg is not search('No SNMP response received before timeout')) or \
                  (device.snmpv3 | default(false) | bool and reg_snmpv3_response.msg is defined and \
                  reg_snmpv3_response.msg is not search('No SNMP response received before timeout'))
              vars:
                v2resp: "{{ reg_snmpv2_response.module_stderr if reg_snmpv2_response.module_stderr is defined and reg_snmpv2_response.module_stderr != '' else \
                  reg_snmpv2_response.msg }}"
                v3resp: "{{ reg_snmpv3_response.module_stderr if reg_snmpv3_response.module_stderr is defined and reg_snmpv3_response.module_stderr != '' else \
                  reg_snmpv3_response.msg }}"
        - name: Verifying API response
          when:
            - device.api | default(false) | bool
          block:
            - name: Verify API response
              ansible.builtin.include_tasks:
                file: task_verify_api_response.yml
                apply:
                  vars:
                    ip: "{{ reg_highest_ip.stdout }}"
                    devid: "{{ device.id }}"
                    apis: "{{ device.apisecure }}"
                    aport: "{{ device.apiport }}"
          rescue:
            - name: Stop AVM
              ansible.builtin.include_tasks:
                file: task_stop_avm.yml
                apply:
                  vars:
                    avm_id: "{{ first_available_id }}"
            - name: Start AVM
              ansible.builtin.include_tasks:
                file: task_start_avm.yml
                apply:
                  vars:
                    avm_id: "{{ first_available_id }}"
                    max_heap_size: "{{ [new_heap | int, (device.num | int / 100) | round | int * 32 + (256 if device.num | int < 900 else 320 if \
                      device.num | int < 4000 else 576)] | max }}"
              vars:
                adj_heap: "{{ max_heap | int + 8 * (first_available_id | int - 100) }}"
                new_heap: "{{ [adj_heap | int, 2048] | min }}"
            - name: Verify API response
              ansible.builtin.include_tasks:
                file: task_verify_api_response.yml
                apply:
                  vars:
                    ip: "{{ reg_highest_ip.stdout }}"
                    devid: "{{ device.id }}"
                    apis: "{{ device.apisecure }}"
                    aport: "{{ device.apiport }}"
