---
# tasks to simulate a device
- name: Get active AVM ID
  ansible.builtin.include_tasks: task_get_active_avmid.yml
- name: Information message
  ansible.builtin.debug:
    msg: "The avm{{ avmid }}.xml file is already started. Nothing to do"
  when: active_avmid_list is contains(avmid)
- name: Starting device and verifying response
  when: active_avmid_list is not contains(avmid)
  vars:
    max_heap: "{{ '64' if reg_ssh_enabled is succeeded else '32' }}"
  block:
    - name: Check if SNMP is enabled in avm{{ avmid + '.xml' }}
      ansible.builtin.shell: |
        grep snmpVersion /opt/{{ automation_reponame }}/simulator/registry/avm{{ avmid }}.xml
      become: "{{ true if ansible_user != 'root' else false }}"
      register: reg_snmp_enabled
      changed_when: false
      ignore_errors: true
      check_mode: false
    - name: Get SNMP info from avm{{ avmid + '.xml' }}
      ansible.builtin.shell: |
        grep '^    <key name="' /opt/{{ automation_reponame }}/simulator/registry/avm{{ avmid }}.xml | cut -d '"' -f2
        grep -E '^.*<entry name="snmpVersion">|^.*<entry name="v3' /opt/{{ automation_reponame }}/simulator/registry/avm{{ avmid }}.xml
        sed -n '/SNMP community/{n;p;}' /opt/{{ automation_reponame }}/simulator/registry/avm{{ avmid }}.xml
        grep -E '^        <entry name="ips"' /opt/{{ automation_reponame }}/simulator/registry/avm{{ avmid }}.xml
      register: reg_snmp_info
      changed_when: false
      ignore_errors: true
      when: reg_snmp_enabled is succeeded
      become: "{{ true if ansible_user != 'root' else false }}"
      check_mode: false
    - name: Check if ssh is enabled in avm{{ avmid + '.xml' }}
      ansible.builtin.lineinfile:
        path: "/opt/{{ automation_reponame }}/simulator/registry/avm{{ avmid }}.xml"
        line: '      <entry name="ssh">2</entry>'
      become: "{{ true if ansible_user != 'root' else false }}"
      register: reg_ssh_enabled
      failed_when: reg_ssh_enabled is changed
      ignore_errors: true
      check_mode: true
    - name: Get SSH info from avm{{ avmid + '.xml' }}
      ansible.builtin.shell:
        cmd: |
          set -o pipefail
          grep -E '^      <entry name="Username"|Password' /opt/{{ automation_reponame }}/simulator/registry/avm{{ avmid }}.xml
          grep -E '^        <entry name="ips"' /opt/{{ automation_reponame }}/simulator/registry/avm{{ avmid }}.xml
        executable: /bin/bash
      register: reg_ssh_info
      changed_when: false
      when: reg_ssh_enabled is succeeded
      become: "{{ true if ansible_user != 'root' else false }}"
      check_mode: false
    - name: Check if api is enabled in avm{{ avmid + '.xml' }}
      ansible.builtin.shell: |
        grep http /opt/{{ automation_reponame }}/simulator/registry/avm{{ avmid }}.xml
      become: "{{ true if ansible_user != 'root' else false }}"
      register: reg_api_enabled
      changed_when: false
      ignore_errors: true
      check_mode: false
    - name: Get API info from avm{{ avmid + '.xml' }}
      ansible.builtin.shell: |
        grep '^    <key name="' /opt/{{ automation_reponame }}/simulator/registry/avm{{ avmid }}.xml | cut -d '"' -f2
        grep 'httpsPort' /opt/{{ automation_reponame }}/simulator/registry/avm{{ avmid }}.xml || \
        grep 'httpPort' /opt/{{ automation_reponame }}/simulator/registry/avm{{ avmid }}.xml
        grep -E '^        <entry name="ips"' /opt/{{ automation_reponame }}/simulator/registry/avm{{ avmid }}.xml
      register: reg_api_info
      changed_when: false
      ignore_errors: true
      when: reg_api_enabled is succeeded
      become: "{{ true if ansible_user != 'root' else false }}"
      check_mode: false
    - name: Starting AVM
      block:
        - name: Create dummy interface
          ansible.builtin.include_tasks:
            file: task_create_dummy_interface.yml
            apply:
              vars:
                int_id: "{{ avmid }}"
        - name: Start AVM
          ansible.builtin.include_tasks:
            file: task_start_avm.yml
            apply:
              vars:
                avm_id: "{{ avmid }}"
                max_heap_size: "{{ new_heap }}"
          vars:
            adj_heap: "{{ max_heap | int + 2 * (avmid | int - 100) }}"
            new_heap: "{{ [adj_heap | int, 2048] | min }}"
      rescue:
        - name: Stop AVM
          ansible.builtin.include_tasks:
            file: task_stop_avm.yml
            apply:
              vars:
                avm_id: "{{ avmid }}"
        - name: Debug message
          ansible.builtin.debug:
            msg: "{{ reg_start.stderr }}"
          when: reg_start.stderr is search('file not found')
        - name: Start AVM
          ansible.builtin.include_tasks:
            file: task_start_avm.yml
            apply:
              vars:
                avm_id: "{{ avmid }}"
                max_heap_size: "{{ [new_heap | int, 256] | max }}"
          vars:
            adj_heap: "{{ max_heap | int + 8 * (avmid | int - 100) }}"
            new_heap: "{{ [adj_heap | int, 2048] | min }}"
          when: reg_start.stderr is search('Invalid maximum heap size|heap space|GC overhead limit exceeded')
    - name: Verifying simulated device response
      when: reg_start is succeeded
      block:
        - name: Get highest used IP
          ansible.builtin.shell:
            cmd: set -o pipefail && ip a show dummy{{ avmid }} | grep inet | tail -1 | awk '{print $2}' | cut -d '/' -f1
            executable: /bin/bash
          register: reg_highest_ip
          changed_when: false
          become: "{{ true if ansible_user != 'root' else false }}"
          check_mode: false
          when: reg_ssh_enabled is succeeded or reg_api_enabled is succeeded
        - name: Verifying SSH connection
          when: reg_ssh_enabled is succeeded
          block:
            - name: Verify SSH connection
              ansible.builtin.include_tasks:
                file: task_verify_ssh_connection.yml
                apply:
                  vars:
                    ip: "{{ reg_highest_ip.stdout }}"
                    username: "{{ reg_ssh_info.stdout_lines | select('search', 'Username') | regex_replace('^.*Username\">(.*)</e.*$', '\\1') }}"
                    password: "{{ reg_ssh_info.stdout_lines | select('search', 'Password') | regex_replace('^.*Password\">(.*)</e.*$', '\\1') }}"
          rescue:
            - name: Stop AVM
              ansible.builtin.include_tasks:
                file: task_stop_avm.yml
                apply:
                  vars:
                    avm_id: "{{ avmid }}"
            - name: Start AVM
              ansible.builtin.include_tasks:
                file: task_start_avm.yml
                apply:
                  vars:
                    avm_id: "{{ avmid }}"
                    num_devices: "{{ reg_ssh_info.stdout_lines | select('search', 'ips') | regex_replace('^.*ips\">.*-(.*)</e.*$', '\\1') }}"
                    max_heap_size: "{{ [new_heap | int, (num_devices | int / 100) | round | int * 32 + (256 if num_devices | int < 900 else 320)] | max }}"
              vars:
                adj_heap: "{{ max_heap | int + 8 * (avmid | int - 100) }}"
                new_heap: "{{ [adj_heap | int, 2048] | min }}"
            - name: Verify SSH connection
              ansible.builtin.include_tasks:
                file: task_verify_ssh_connection.yml
                apply:
                  vars:
                    ip: "{{ reg_highest_ip.stdout }}"
                    username: "{{ reg_ssh_info.stdout_lines | select('search', 'Username') | regex_replace('^.*Username\">(.*)</e.*$', '\\1') }}"
                    password: "{{ reg_ssh_info.stdout_lines | select('search', 'Password') | regex_replace('^.*Password\">(.*)</e.*$', '\\1') }}"
        - name: Verifying SNMP response
          when: reg_snmp_enabled is succeeded
          vars:
            deviceid: "{{ reg_snmp_info.stdout_lines[0] }}"
            ipaddr: "{{ reg_highest_ip.stdout }}"
            snmpv2on: "{{ reg_snmp_info.stdout_lines | select('search', 'snmpVersion') | regex_replace('^.*snmpVersion\">(.*)</e.*$', '\\1') == '2' }}"
            snmpv3on: "{{ reg_snmp_info.stdout_lines | select('search', 'snmpVersion') | regex_replace('^.*snmpVersion\">(.*)</e.*$', '\\1') == '3' }}"
            community: "{{ reg_snmp_info.stdout_lines | select('search', 'key name') | regex_replace('^.*=\"(.*)\">.*$', '\\1') }}"
            authprotocol: "{{ reg_snmp_info.stdout_lines | select('search', 'v3AuthProtocol') | regex_replace('^.*v3AuthProtocol\">(.*)</e.*$', '\\1') }}"
            privprotocol: "{{ reg_snmp_info.stdout_lines | select('search', 'v3PrivProtocol') | regex_replace('^.*v3PrivProtocol\">(.*)</e.*$', '\\1') }}"
            authusername: "{{ reg_snmp_info.stdout_lines | select('search', 'v3UserName') | regex_replace('^.*v3UserName\">(.*)</e.*$', '\\1') }}"
            authpassword: "{{ reg_snmp_info.stdout_lines | select('search', 'v3AuthPassword') | regex_replace('^.*v3AuthPassword\">(.*)</e.*$', '\\1') }}"
            privpassword: "{{ reg_snmp_info.stdout_lines | select('search', 'v3PrivPassword') | regex_replace('^.*v3PrivPassword\">(.*)</e.*$', '\\1') }}"
          block:
            - name: Verify SNMP response
              block:
                - name: Verify SNMP response
                  ansible.builtin.include_tasks:
                    file: task_verify_snmp_response.yml
                    apply:
                      vars:
                        devid: "{{ deviceid }}"
                        ip: "{{ ipaddr }}"
                        snmpv2: "{{ snmpv2on }}"
                        snmpv3: "{{ snmpv3on }}"
                        comstr: "{{ community }}"
                        authpr: "{{ authprotocol }}"
                        privpr: "{{ privprotocol }}"
                        authusr: "{{ authusername }}"
                        authpas: "{{ authpassword }}"
                        privpas: "{{ privpassword }}"
              rescue:
                - name: Stop AVM
                  ansible.builtin.include_tasks:
                    file: task_stop_avm.yml
                    apply:
                      vars:
                        avm_id: "{{ avmid }}"
                - name: Start AVM
                  ansible.builtin.include_tasks:
                    file: task_start_avm.yml
                    apply:
                      vars:
                        avm_id: "{{ avmid }}"
                        num_devices: "{{ reg_snmp_info.stdout_lines | select('search', 'ips') | regex_replace('^.*ips\">.*-(.*)</e.*$', '\\1') }}"
                        max_heap_size: "{{ [new_heap | int, (num_devices | int / 100) | round | int * 32 + (256 if num_devices | int < 900 else 320)] | max }}"
                  vars:
                    adj_heap: "{{ max_heap | int + 8 * (avmid | int - 100) }}"
                    new_heap: "{{ [adj_heap | int, 2048] | min }}"
                - name: Verify SNMP response
                  ansible.builtin.include_tasks:
                    file: task_verify_snmp_response.yml
                    apply:
                      vars:
                        devid: "{{ deviceid }}"
                        ip: "{{ ipaddr }}"
                        snmpv2: "{{ snmpv2on }}"
                        snmpv3: "{{ snmpv3on }}"
                        comstr: "{{ community }}"
                        authpr: "{{ authprotocol }}"
                        privpr: "{{ privprotocol }}"
                        authusr: "{{ authusername }}"
                        authpas: "{{ authpassword }}"
                        privpas: "{{ privpassword }}"
            - name: Define snmp_flawed_recording_list
              ansible.builtin.set_fact:
                snmp_flawed_recording_list: "{{ snmp_flawed_recording_list | default([]) + \
                  [deviceid + ': ' + (v3resp if snmpv3on | default(false) else v2resp) | string] }}"
              when:
                - (snmpv2on | default(false) | bool and reg_snmpv2_response.msg is defined and \
                  reg_snmpv2_response.msg is not search('No SNMP response received before timeout')) or \
                  (snmpv3on | default(false) | bool and reg_snmpv3_response.msg is defined and \
                  reg_snmpv3_response.msg is not search('No SNMP response received before timeout'))
              vars:
                v2resp: "{{ reg_snmpv2_response.module_stderr if reg_snmpv2_response.module_stderr is defined and reg_snmpv2_response.module_stderr != '' else \
                  reg_snmpv2_response.msg }}"
                v3resp: "{{ reg_snmpv3_response.module_stderr if reg_snmpv3_response.module_stderr is defined and reg_snmpv3_response.module_stderr != '' else \
                  reg_snmpv3_response.msg }}"
        - name: Verifying API response
          when:
            - reg_api_enabled is succeeded
          block:
            - name: Verify API response
              ansible.builtin.include_tasks:
                file: task_verify_api_response.yml
                apply:
                  vars:
                    ip: "{{ reg_highest_ip.stdout }}"
                    devid: "{{ reg_api_info.stdout_lines | first }}"
                    apis: "{{ true if reg_api_info.stdout_lines | select('search', 'httpsPort') != [] else false }}"
                    aport: "{{ reg_api_info.stdout_lines | select('search', '(http|https)Port') | regex_replace('^.*Port\">(.*)</e.*$', '\\1') }}"
          rescue:
            - name: Stop AVM
              ansible.builtin.include_tasks:
                file: task_stop_avm.yml
                apply:
                  vars:
                    avm_id: "{{ avmid }}"
            - name: Start AVM
              ansible.builtin.include_tasks:
                file: task_start_avm.yml
                apply:
                  vars:
                    avm_id: "{{ avmid }}"
                    num_devices: "{{ reg_api_info.stdout_lines | select('search', 'ips') | regex_replace('^.*ips\">.*-(.*)</e.*$', '\\1') }}"
                    max_heap_size: "{{ [new_heap | int, (num_devices | int / 100) | round | int * 32 + (256 if num_devices | int < 900 else 320)] | max }}"
              vars:
                adj_heap: "{{ max_heap | int + 8 * (avmid | int - 100) }}"
                new_heap: "{{ [adj_heap | int, 2048] | min }}"
            - name: Verify API response
              ansible.builtin.include_tasks:
                file: task_verify_api_response.yml
                apply:
                  vars:
                    ip: "{{ reg_highest_ip.stdout }}"
                    devid: "{{ reg_api_info.stdout_lines | first }}"
                    apis: "{{ true if reg_api_info.stdout_lines | select('search', 'httpsPort') != [] else false }}"
                    aport: "{{ reg_api_info.stdout_lines | select('search', '(http|https)Port') | regex_replace('^.*Port\">(.*)</e.*$', '\\1') }}"
