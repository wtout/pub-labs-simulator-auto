---
# Tasks to copy the simulator packages
- name: Copy the simulator packahes
  become: "{{ true if ansible_user != 'root' else false }}"
  block:
    # yamllint disable rule:line-length
    - name: Fix the Centos7 yum issue (due to EOL)
      ansible.builtin.shell:
        cmd: |
          set -o pipefail
          sed -i -e 's/mirrorlist=/#mirrorlist=/g' /etc/yum.repos.d/CentOS-*
          sed -i -e 's/mirrorlist=/#mirrorlist=/g' /etc/yum.conf
          sed -E -i -e 's/#baseurl=http:\/\/mirror.centos.org\/centos\/\$releasever\/([[:alnum:]_-]*)\/\$basearch\//baseurl=https:\/\/vault.centos.org\/{{ centos_string }}\/\1\/\$basearch\//g' /etc/yum.repos.d/CentOS-*
          sed -E -i -e 's/#baseurl=http:\/\/mirror.centos.org\/centos\/\$releasever\/([[:alnum:]_-]*)\/\$basearch\//baseurl=https:\/\/vault.centos.org\/{{ centos_string }}\/\1\/\$basearch\//g' /etc/yum.conf
        executable: /bin/bash
      register: fix_yum
      changed_when: fix_yum.rc == 0
      vars:
        centos_string: "{{ '7.7.1908' if build.version.os_iso is search('1908') else '7.9.2009' if build.version.os_iso is search('2009') else '' }}"
    # yamllint enable rule:line-length
    - name: Install git
      ansible.builtin.yum:
        name: 'git'
        state: installed
    - name: Clone the repos
      ansible.builtin.git:
        repo: "{{ repo_item.name | regex_replace('//', '//' + repo_creds + '@') }}"
        dest: "/opt/{{ repo_item.name | basename | replace('.git', '') }}"
        version: "{{ repo_item.release }}"
        force: true
      loop:
        - { name: "{{ automation_site }}/{{ automation_reponame }}.git", release: 'HEAD' }
      loop_control:
        loop_var: repo_item
      register: reg_clone_repos1
      ignore_errors: true
      async: 200
      poll: 10
    - name: Clone the repos
      ansible.builtin.git:
        repo: "{{ repo_item.name | regex_replace('//', '//' + repo_creds + '@') }}"
        dest: "/opt/{{ repo_item.name | basename | replace('.git', '') }}"
        version: "{{ repo_item.release }}"
        force: true
      loop:
        - { name: "{{ automation_site }}/{{ automation_reponame }}.git", release: 'HEAD' }
      loop_control:
        loop_var: repo_item
      register: reg_clone_repos2
      async: 200
      poll: 10
      when: reg_clone_repos1 is failed
    - name: Define clone_repos
      ansible.builtin.set_fact:
        clone_repos: "{{ reg_clone_repos1 if reg_clone_repos1 is succeeded else reg_clone_repos2 }}"
    - name: Ensure log directory exists
      ansible.builtin.file:
        path: "/opt/{{ automation_reponame }}/simulator/log"
        state: directory
        mode: '755'
    - name: Ensure Simulator.log file exists
      ansible.builtin.file:
        path: "/opt/{{ automation_reponame }}/simulator/log/Simulator.log"
        state: touch
        mode: '644'
