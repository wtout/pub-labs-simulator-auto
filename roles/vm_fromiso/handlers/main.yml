---
# handlers file for vm_fromiso
- name: restart chrony
  ansible.builtin.systemd:
    name: chronyd
    state: restarted
    daemon_reload: yes
  become: "{{ true if ansible_user != 'root' else false }}"

- name: expand disk0
  ansible.builtin.shell: |
    for BUS in /sys/class/scsi_disk/*/device/rescan; do echo 1 > ${BUS}; done
    echo -e "d\n3\nn\np\n3\n\n\nw\n" | fdisk /dev/sda
    partprobe
    xfs_growfs $(grep ' / ' /etc/fstab | grep -v '#' | awk '{print $2}')
  become: "{{ true if ansible_user != 'root' else false }}"

- name: reboot vm
  ansible.builtin.reboot:
    post_reboot_delay: 10
    reboot_timeout: 60
  become: "{{ true if ansible_user != 'root' else false }}"

- name: expand disk1
  ansible.builtin.shell: |
    FSTYPE='xfs'
    MP1=$(df -h | grep sdb1 | awk '{print $NF}')
    umount ${MP1}
    {{ 'sleep 2' if build.version.os_iso|lower is search('centos') else '' }}
    [[ "${MP1}" != "{{ vm.disk1_mount }}" ]] && mv ${MP1} {{ vm.disk1_mount }}
    for BUS in /sys/class/scsi_disk/*/device/rescan; do echo 1 > ${BUS}; done
    parted -s /dev/sdb resizepart 1 100%
    {{ 'sleep 2' if build.version.os_iso|lower is search('centos') else '' }}
    disk1_uuid=$(blkid | grep sdb1 | awk '{print $2}' | sed 's|"||g; s|UUID=||')
    sed -i "s|^\(.*${disk1_uuid}\) /[[:alnum:]]* ${FSTYPE}|\1 {{ vm.disk1_mount }} ${FSTYPE}|" /etc/fstab
    {{ 'sleep 2' if build.version.os_iso|lower is search('centos') else '' }}
    systemctl daemon-reload
    mount -a
    xfs_growfs -d {{ vm.disk1_mount }}
  args:
    executable: /bin/bash
  become: "{{ true if ansible_user != 'root' else false }}"

- name: add disk1
  ansible.builtin.shell: |
    for BUS in /sys/class/scsi_host/host*/scan; do echo "- - -" > ${BUS}; done
    echo -e "n\np\n\n\n\nw\n" | fdisk /dev/sdb
  become: "{{ true if ansible_user != 'root' else false }}"
  notify: create disk1 filesystem

- name: create disk1 filesystem
  ansible.builtin.filesystem:
    fstype: xfs
    device: /dev/sdb1
  become: "{{ true if ansible_user != 'root' else false }}"
  notify: get disk1 UUID

- name: get disk1 UUID
  ansible.builtin.shell: |
    blkid | grep sdb1 | awk '{print $2}' | sed 's|"||g'
  register: reg_disk1_uuid
  become: "{{ true if ansible_user != 'root' else false }}"
  notify: set disk1 mount points

- name: set disk1 mount points
  ansible.posix.mount:
    name: "{{ vm.disk1_mount }}"
    src: "{{ reg_disk1_uuid.stdout }}"
    fstype: xfs
    opts: defaults
    state: mounted
    dump: '1'
    passno: '2'
  become: "{{ true if ansible_user != 'root' else false }}"
  notify: set permissions and ownership of disk1

- name: set permissions and ownership of disk1
  ansible.builtin.file:
    path: "{{ vm.disk1_mount }}"
    state: directory
    mode: 0755
    owner: root
    group: root
  become: "{{ true if ansible_user != 'root' else false }}"

- name: expand disk2
  ansible.builtin.shell: |
    FSTYPE='xfs'
    MP2=$(df -h | grep sdc1 | awk '{print $NF}')
    umount ${MP2}
    {{ 'sleep 2' if build.version.os_iso|lower is search('centos') else '' }}
    [[ "${MP2}" != "{{ vm.disk2_mount }}" ]] && mv ${MP2} {{ vm.disk2_mount }}
    for BUS in /sys/class/scsi_disk/*/device/rescan; do echo 1 > ${BUS}; done
    parted -s /dev/sdc resizepart 1 100%
    {{ 'sleep 2' if build.version.os_iso|lower is search('centos') else '' }}
    disk2_uuid=$(blkid | grep sdc1 | awk '{print $2}' | sed 's|"||g; s|UUID=||')
    sed -i "s|^\(.*${disk2_uuid}\) /[[:alnum:]]* ${FSTYPE}|\1 {{ vm.disk2_mount }} ${FSTYPE}|" /etc/fstab
    {{ 'sleep 2' if build.version.os_iso|lower is search('centos') else '' }}
    systemctl daemon-reload
    mount -a
    xfs_growfs -d {{ vm.disk2_mount }}
  args:
    executable: /bin/bash
  become: "{{ true if ansible_user != 'root' else false }}"

- name: add disk2
  ansible.builtin.shell: |
    for BUS in /sys/class/scsi_host/host*/scan; do echo "- - -" > ${BUS}; done
    echo -e "n\np\n\n\n\nw\n" | fdisk /dev/sdc
  become: "{{ true if ansible_user != 'root' else false }}"
  notify: create disk2 filesystem

- name: create disk2 filesystem
  ansible.builtin.filesystem:
    fstype: xfs
    device: /dev/sdc1
  become: "{{ true if ansible_user != 'root' else false }}"
  notify: get disk2 UUID

- name: get disk2 UUID
  ansible.builtin.shell: |
    blkid | grep sdc1 | awk '{print $2}' | sed 's|"||g'
  register: reg_disk2_uuid
  become: "{{ true if ansible_user != 'root' else false }}"
  notify: set disk2 mount points

- name: set disk2 mount points
  ansible.posix.mount:
    name: "{{ vm.disk2_mount }}"
    src: "{{ reg_disk2_uuid.stdout }}"
    fstype: xfs
    opts: defaults
    state: mounted
    dump: '1'
    passno: '2'
  become: "{{ true if ansible_user != 'root' else false }}"
  notify: set permissions and ownership of disk2

- name: set permissions and ownership of disk2
  ansible.builtin.file:
    path: "{{ vm.disk2_mount }}"
    state: directory
    mode: 0755
    owner: root
    group: root
  become: "{{ true if ansible_user != 'root' else false }}"

- name: expand disk3
  ansible.builtin.shell: |
    FSTYPE='xfs'
    MP3=$(df -h | grep sdd1 | awk '{print $NF}')
    umount ${MP3}
    {{ 'sleep 2' if build.version.os_iso|lower is search('centos') else '' }}
    [[ "${MP3}" != "{{ vm.disk3_mount }}" ]] && mv ${MP3} {{ vm.disk3_mount }}
    for BUS in /sys/class/scsi_disk/*/device/rescan; do echo 1 > ${BUS}; done
    parted -s /dev/sdd resizepart 1 100%
    {{ 'sleep 2' if build.version.os_iso|lower is search('centos') else '' }}
    disk3_uuid=$(blkid | grep sdd1 | awk '{print $2}' | sed 's|"||g; s|UUID=||')
    sed -i "s|^\(.*${disk3_uuid}\) /[[:alnum:]]* ${FSTYPE}|\1 {{ vm.disk3_mount }} ${FSTYPE}|" /etc/fstab
    {{ 'sleep 2' if build.version.os_iso|lower is search('centos') else '' }}
    systemctl daemon-reload
    mount -a
    xfs_growfs -d {{ vm.disk3_mount }}
  args:
    executable: /bin/bash
  become: "{{ true if ansible_user != 'root' else false }}"

- name: add disk3
  ansible.builtin.shell: |
    for BUS in /sys/class/scsi_host/host*/scan; do echo "- - -" > ${BUS}; done
    echo -e "n\np\n\n\n\nw\n" | fdisk /dev/sdd
  become: "{{ true if ansible_user != 'root' else false }}"
  notify: create disk3 filesystem

- name: create disk3 filesystem
  ansible.builtin.filesystem:
    fstype: xfs
    device: /dev/sdd1
  become: "{{ true if ansible_user != 'root' else false }}"
  notify: get disk3 UUID

- name: get disk3 UUID
  ansible.builtin.shell: |
    blkid | grep sdd1 | awk '{print $2}' | sed 's|"||g'
  register: reg_disk3_uuid
  become: "{{ true if ansible_user != 'root' else false }}"
  notify: set disk3 mount points

- name: set disk3 mount points
  ansible.posix.mount:
    name: "{{ vm.disk3_mount }}"
    src: "{{ reg_disk3_uuid.stdout }}"
    fstype: xfs
    opts: defaults
    state: mounted
    dump: '1'
    passno: '2'
  become: "{{ true if ansible_user != 'root' else false }}"
  notify: set permissions and ownership of disk3

- name: set permissions and ownership of disk3
  ansible.builtin.file:
    path: "{{ vm.disk3_mount }}"
    state: directory
    mode: 0755
    owner: root
    group: root
  become: "{{ true if ansible_user != 'root' else false }}"
