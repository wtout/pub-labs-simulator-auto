---
# tasks to check connectivity and credentials for hosts
- name: Checking connection credentials
  block:
    - name: Checking if VM exists
      block:
        - name: Check if VM exists
          community.vmware.vmware_guest_info:
            hostname: "{{ hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['information']['address'] }}"
            username: "{{ hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['credentials']['username'] }}"
            password: "{{ hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['credentials']['password'] }}"
            datacenter: "{{ hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['information']['datacenter'] }}"
            name: "{{ vm.name }}"
            schema: vsphere
            validate_certs: false
          register: reg_vm_exists
          no_log: true
          delegate_to: localhost
        - name: Power on VM
          ansible.builtin.include_tasks: task_poweron_vm.yml
        - name: Set flag to not create and configure the VMs
          ansible.builtin.set_fact:
            crecon: false
      rescue:
        - name: Switch to {{ vm_admin_user + ' user' }}
          ansible.builtin.set_fact:
            ansible_user: "{{ vm_admin_user }}"
            ansible_ssh_pass: "{{ vm_admin_pass }}"
            ansible_become_pass: "{{ vm_admin_pass }}"
          no_log: true
          when: build.version.os_iso | lower is search('ubuntu')
    - name: Check connection credentials
      when: reg_vm_exists is succeeded
      block:
        - name: Check VM reachable
          ansible.builtin.command: ping {{ ansible_host }} -c 1
          register: vcr_vm_reachable
          changed_when: false
          check_mode: false
          ignore_unreachable: true
          until: vcr_vm_reachable is succeeded
          retries: 5
          delay: 10
          delegate_to: localhost
          become: "{{ true if host_os | lower is search('almalinux|ubuntu') else false }}"
        - name: Check original credentials
          block:
            - name: Check VM credentials
              ansible.builtin.wait_for_connection:
                timeout: 10
              register: vcr_vm_creds
              check_mode: false
          rescue:
            - name: Switch to { vm_admin_user + ' user' }}
              ansible.builtin.set_fact:
                ansible_user: "{{ vm_admin_user }}"
                ansible_ssh_pass: "{{ vm_admin_pass }}"
                ansible_become_pass: "{{ vm_admin_pass }}"
              no_log: true
            - name: Check {{ vm_admin_user + ' credentials' }}
              ansible.builtin.wait_for_connection:
                timeout: 10
      rescue:
        - name: Check user credentials
          block:
            - name: Switch to { vm_admin_user + ' user' }}
              ansible.builtin.set_fact:
                ansible_user: "{{ vm_admin_user }}"
                ansible_ssh_pass: "{{ vm_admin_pass }}"
                ansible_become_pass: "{{ vm_admin_pass }}"
              no_log: true
            - name: Check connection
              ansible.builtin.wait_for:
                port: 22
                host: "{{ netconfig.nic1.ipaddress }}"
                search_regex: OpenSSH
                timeout: 10
              register: vcr_vm_connection
              check_mode: false
              delegate_to: localhost
          rescue:
            - name: Revert user
              ansible.builtin.set_fact:
                ansible_user: "{{ credentials.username }}"
                ansible_ssh_pass: "{{ credentials.password }}"
                ansible_become_pass: "{{ credentials.password }}"
              no_log: true
